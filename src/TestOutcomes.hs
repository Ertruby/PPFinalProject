module TestOutcomes where

import DataTypesEtc

assignFailAST = ASTNode Program []
assignAST = ASTNode Program [ASTNode FuncName [ASTLeaf "AssignTest"],ASTNode ProgBody [ASTNode Assign [ASTNode Idf [ASTLeaf "b"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "5"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "c"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "43"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "d"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "false"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "e"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "true"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "f"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]],ASTNode Assign [ASTNode Idf [ASTLeaf "a"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Idf [ASTLeaf "c"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "2"]]]],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "34"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "3"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "e",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "4"]]]],ASTNode Expr [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "0"]]]],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "1"]]]]]]]]]
commentFailAST = ASTNode Program []
commentAST = ASTNode Program [ASTNode FuncName [ASTLeaf "CommentTest"],ASTNode ProgBody [ASTNode Decl [ASTNode Type [ASTLeaf "TypeBool"],ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "true"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "false"]]]],ASTNode When [ASTNode Expr [ASTNode Idf [ASTLeaf "y"]],ASTNode Body [ASTNode Assign [ASTNode Idf [ASTLeaf "y"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "false"]]]]]]]]
declFailAST = ASTNode Program []
declAST = ASTNode Program [ASTNode FuncName [ASTLeaf "DeclTest"],ASTNode ProgBody [ASTNode Decl [ASTNode Type [ASTLeaf "TypeBool"],ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "true"]]]],ASTNode Decl [ASTNode Type [ASTLeaf "TypeBool"],ASTNode Idf [ASTLeaf "y"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "false"]]]],ASTNode Decl [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "a"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "-2"]]]],ASTNode Decl [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "b"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "42"]]]],ASTNode Decl [ASTNode Type [ASTNode TypeArray [ASTNode Type [ASTLeaf "TypeInt"]]],ASTNode Idf [ASTLeaf "d"],ASTNode Expr [ASTNode Array [ASTNode Value [ASTNode Integer [ASTLeaf "1"]],ASTNode Value [ASTNode Integer [ASTLeaf "2"]],ASTNode Value [ASTNode Integer [ASTLeaf "-3"]]]]],ASTNode Decl [ASTNode Type [ASTNode TypeArray [ASTNode Type [ASTLeaf "TypeInt"]]],ASTNode Idf [ASTLeaf "e"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "5"]]]]]]
exprFailAST = ASTNode Program []
exprAST = ASTNode Program [ASTNode FuncName [ASTLeaf "ExpressionTest"],ASTNode ProgBody [ASTNode Assign [ASTNode Idf [ASTLeaf "b"],ASTNode Expr [ASTNode Idf [ASTLeaf "c"],ASTNode Op [ASTLeaf "times"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "a"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Idf [ASTLeaf "c"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "a"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"],ASTNode Op [ASTLeaf "minus"],ASTNode Expr [ASTNode Idf [ASTLeaf "c"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "a"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"],ASTNode Op [ASTLeaf "DividedBy"],ASTNode Expr [ASTNode Idf [ASTLeaf "c"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "true"]],ASTNode Op [ASTLeaf "and"],ASTNode Expr [ASTNode Idf [ASTLeaf "y"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Idf [ASTLeaf "x"],ASTNode Op [ASTLeaf "or"],ASTNode Expr [ASTNode Idf [ASTLeaf "y"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Idf [ASTLeaf "a"],ASTNode Op [ASTLeaf "equals"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Idf [ASTLeaf "a"],ASTNode Op [ASTLeaf "GreaterThan"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Idf [ASTLeaf "a"],ASTNode Op [ASTLeaf "GreaterThanEq"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Idf [ASTLeaf "a"],ASTNode Op [ASTLeaf "SmallerThan"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Idf [ASTLeaf "a"],ASTNode Op [ASTLeaf "SmallerThanEq"],ASTNode Expr [ASTNode Idf [ASTLeaf "b"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "c"],ASTNode Expr [ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "3"]],ASTNode Op [ASTLeaf "minus"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "1"]]]],ASTNode Op [ASTLeaf "times"],ASTNode Expr [ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "7"]],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "8"]]]]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Expr [ASTNode Idf [ASTLeaf "a"],ASTNode Op [ASTLeaf "DividedBy"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "3"]]]],ASTNode Op [ASTLeaf "equals"],ASTNode Expr [ASTNode Expr [ASTNode Idf [ASTLeaf "b"],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "8"]]]]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "x"],ASTNode Expr [ASTNode Expr [ASTNode Expr [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Idf [ASTLeaf "a"]]],ASTNode Op [ASTLeaf "DividedBy"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "3"]]]],ASTNode Op [ASTLeaf "equals"],ASTNode Expr [ASTNode Expr [ASTNode Idf [ASTLeaf "b"],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "0"]]]]]]]],ASTNode Op [ASTLeaf "and"],ASTNode Expr [ASTNode Idf [ASTLeaf "y"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "e",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "4"]]]],ASTNode Expr [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "0"]]]],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Idf [ASTLeaf "d",ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "1"]]]]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "k"],ASTNode Expr [ASTNode FuncCall [ASTNode FuncName [ASTLeaf "Fib"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "4"]]]]]]]]
funcCallFailAST = ASTNode Program []
funcCallAST = ASTNode Program [ASTNode FuncName [ASTLeaf "FuncCallTest"],ASTNode ProgBody [ASTNode Assign [ASTNode Idf [ASTLeaf "g"],ASTNode Expr [ASTNode FuncCall [ASTNode FuncName [ASTLeaf "Fib"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "4"]]]]]],ASTNode FuncCall [ASTNode FuncName [ASTLeaf "Func"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "4"]]],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "5"]]],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "true"]]],ASTNode Expr [ASTNode Value [ASTNode Boolean [ASTLeaf "false"]]]],ASTNode FuncCall [ASTNode FuncName [ASTLeaf "F"],ASTNode Expr [ASTNode Idf [ASTLeaf "g"]]]]]
incrFailAST = ASTNode Program []
incrAST = ASTNode Program [ASTNode FuncName [ASTLeaf "IncrTest"],ASTNode ProgBody [ASTNode Incr [ASTNode Idf [ASTLeaf "a"]]]]
programFailAST = ASTNode Program []
programAST = ASTNode Program [ASTNode FuncName [ASTLeaf "ProgramTest"],ASTNode ProgBody []]
taskFailAST = ASTNode Program []
taskAST = ASTNode Program [ASTNode FuncName [ASTLeaf "TaskTest"],ASTNode ProgBody [ASTNode Task [ASTNode FuncName [ASTLeaf "H"],ASTNode Args [ASTNode Arg [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "i"]]],ASTNode Type [ASTLeaf "TypeInt"],ASTNode Body [ASTNode Decl [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "n"],ASTNode Expr [ASTNode Idf [ASTLeaf "i"],ASTNode Op [ASTLeaf "plus"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "1"]]]]],ASTNode Idf [ASTLeaf "n"]]],ASTNode Task [ASTNode FuncName [ASTLeaf "Func"],ASTNode Args [ASTNode Arg [ASTNode Type [ASTLeaf "TypeBool"],ASTNode Idf [ASTLeaf "g"]],ASTNode Arg [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "i"]]],ASTNode Type [ASTLeaf "TypeInt"],ASTNode Body [ASTNode Decl [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "a"]],ASTNode Task [ASTNode FuncName [ASTLeaf "Stuff"],ASTNode Args [ASTNode Arg [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "i"]]],ASTNode Type [ASTLeaf "TypeNothing"],ASTNode Body [ASTNode Assign [ASTNode Idf [ASTLeaf "a"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "9"]]]]]],ASTNode FuncCall [ASTNode FuncName [ASTLeaf "Stuff"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "5"]]]],ASTNode Assign [ASTNode Idf [ASTLeaf "a"],ASTNode Expr [ASTNode FuncCall [ASTNode FuncName [ASTLeaf "H"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "23"]]]]]],ASTNode Idf [ASTLeaf "b"]]],ASTNode Task [ASTNode FuncName [ASTLeaf "Nothing"],ASTNode Args [ASTNode Arg [ASTNode Type [ASTLeaf "TypeInt"],ASTNode Idf [ASTLeaf "i"]]],ASTNode Type [ASTLeaf "TypeNothing"],ASTNode Body []]]]
whenFailAST = ASTNode Program []
whenAST = ASTNode Program [ASTNode FuncName [ASTLeaf "WhenTest"],ASTNode ProgBody [ASTNode When [ASTNode Expr [ASTNode Idf [ASTLeaf "y"]],ASTNode Body []],ASTNode When [ASTNode Expr [ASTNode Idf [ASTLeaf "x"],ASTNode Op [ASTLeaf "SmallerThanEq"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "5"]]]],ASTNode Body [],ASTNode Body []]]]
whileFailAST = ASTNode Program []
whileAST = ASTNode Program [ASTNode FuncName [ASTLeaf "WhileTest"],ASTNode ProgBody [ASTNode While [ASTNode Expr [ASTNode Idf [ASTLeaf "h"],ASTNode Op [ASTLeaf "SmallerThan"],ASTNode Expr [ASTNode Value [ASTNode Integer [ASTLeaf "20"]]]],ASTNode Body [ASTNode Incr [ASTNode Idf [ASTLeaf "c"]]]]]]




