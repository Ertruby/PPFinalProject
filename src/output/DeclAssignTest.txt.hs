{-# LANGUAGE RecordWildCards #-} 
module Output.DeclAssignTest.txt where 
import Sprockell.System
prog:: [Instruction] 
prog = [Const 1 RegA,Store RegA (Addr 0),Const 0 RegA,Store RegA (Addr 1),Const 2 RegA,Store RegA (Addr 2),Const 42 RegA,Store RegA (Addr 3),Const 3 RegA,Const 1 RegB,Compute Sub RegA RegB RegA,Const 7 RegB,Const 8 RegC,Compute Add RegB RegC RegB,Compute Mul RegA RegB RegA,Store RegA (Addr 4),Load (Addr 4) RegA,Load (Addr 3) RegB,Compute Mul RegA RegB RegA,Store RegA (Addr 3),Load (Addr 3) RegA,Load (Addr 4) RegB,Compute Add RegA RegB RegA,Store RegA (Addr 2),Load (Addr 3) RegA,Load (Addr 4) RegB,Compute Sub RegA RegB RegA,Store RegA (Addr 2),Load (Addr 3) RegA,Load (Addr 4) RegB,Compute Div RegA RegB RegA,Store RegA (Addr 2),Const 1 RegA,Load (Addr 1) RegB,Compute And RegA RegB RegA,Store RegA (Addr 0),Load (Addr 0) RegA,Load (Addr 1) RegB,Compute Or RegA RegB RegA,Store RegA (Addr 0),Load (Addr 2) RegA,Load (Addr 3) RegB,Compute Equal RegA RegB RegA,Store RegA (Addr 0),Load (Addr 2) RegA,Load (Addr 3) RegB,Compute Gt RegA RegB RegA,Store RegA (Addr 0),Load (Addr 2) RegA,Load (Addr 3) RegB,Compute GtE RegA RegB RegA,Store RegA (Addr 0),Load (Addr 2) RegA,Load (Addr 3) RegB,Compute Lt RegA RegB RegA,Store RegA (Addr 0),Load (Addr 2) RegA,Load (Addr 3) RegB,Compute LtE RegA RegB RegA,Store RegA (Addr 0),Const 1 RegA,Store RegA (Addr 5),Const 2 RegA,Store RegA (Addr 6),Const 3 RegA,Store RegA (Addr 7),EndProg]
main = run 1 prog >> putChar '\n'
