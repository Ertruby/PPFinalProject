{-# LANGUAGE RecordWildCards #-} 
module Output.Test0 where 
import Sprockell.System
prog:: [Instruction] 
prog = [Const 3 RegA,Store RegA (Addr 0),Const 3 RegA,Compute Add RegA PC RegA,Store RegA (Addr 1),Jump (Rel 82),Pop RegA,Store RegA (Addr 2),Pop RegA,Store RegA (Addr 3),Pop RegA,Store RegA (Addr 4),Const 0 RegA,Store RegA (Addr 5),Const 0 RegA,Store RegA (Addr 6),Const 10 RegA,Store RegA (Addr 5),Load (Addr 0) RegA,Load (Addr 5) RegB,Compute Add RegA RegB RegA,Const 5 RegB,Compute Mul RegA RegB RegA,Store RegA (Addr 6),Const 6 RegA,Store RegA (Addr 0),Const 0 RegA,Store RegA (Addr 7),Const 0 RegA,Store RegA (Addr 2),Const 0 RegA,Store RegA (Addr 7),Compute Add PC Zero RegA,Push RegA,Load (Addr 0) RegA,Load (Addr 5) RegB,Compute Gt RegA RegB RegA,Const 1 RegB,Compute Xor RegA RegB RegA,Const 19 RegB,Compute Add RegB PC RegB,Branch RegA (Ind RegB),Load (Addr 5) RegA,Const 20 RegB,Compute Gt RegA RegB RegA,Const 1 RegB,Const 1 RegC,Compute Equal RegB RegC RegB,Compute And RegA RegB RegA,Const 1 RegB,Compute Xor RegA RegB RegA,Const 5 RegB,Compute Add RegB PC RegB,Branch RegA (Ind RegB),Const 1 RegA,Store RegA (Addr 7),Jump (Rel 1),Pop RegA,Jump (Ind RegA),Pop RegA,Load (Addr 2) RegA,Const 0 RegB,Compute Equal RegA RegB RegA,Const 1 RegB,Compute Xor RegA RegB RegA,Const 15 RegB,Compute Add RegB PC RegB,Branch RegA (Ind RegB),Load (Addr 0) RegA,Const 1 RegB,Compute Add RegA RegB RegA,Store RegA (Addr 0),Load (Addr 0) RegA,Load (Addr 5) RegB,Compute Mul RegA RegB RegA,Store RegA (Addr 0),Load (Addr 0) RegA,Const 1 RegB,Compute Add RegA RegB RegA,Store RegA (Addr 0),Jump (Rel 1),Load (Addr 0) RegA,Store RegA (Addr 8),Load (Addr 8) RegA,Pop RegB,Push RegA,Jump (Ind RegB),Const 0 RegA,Store RegA (Addr 2),EndProg]
main = run 1 prog >> putChar '\n'
